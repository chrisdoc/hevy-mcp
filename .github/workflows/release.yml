name: Release

on:
  push:
    branches:
      - main
permissions:
  contents: read # for checkout

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
      packages: write # to push Docker images to GHCR
    outputs:
      version: ${{ steps.release.outputs.version }}
      released: ${{ steps.release.outputs.released }}
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v5
        with:
          node-version-file: '.nvmrc'
      - run: npm ci
      - run: npm run build
      - name: Run unit tests
        run: npx vitest run --exclude tests/integration/**
      - name: Run integration tests
        run: npx vitest run tests/integration
        env:
          HEVY_API_KEY: ${{ secrets.HEVY_API_KEY }}
      - name: Store initial version
        id: initial_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
      - name: Release
        id: release_step
        run: npm run release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Check if release was created
        id: release
        run: |
          NEW_VERSION=$(node -p "require('./package.json').version")
          if [ "$NEW_VERSION" != "${{ steps.initial_version.outputs.version }}" ]; then
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "released=true" >> $GITHUB_OUTPUT
            echo "Release created: $NEW_VERSION"
          else
            echo "released=false" >> $GITHUB_OUTPUT
            echo "No release created"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  docker-release:
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.released == 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=semver,pattern={{version}},value=${{ needs.release.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.release.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.release.outputs.version }}
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
